---
const navItems = [
  { href: "/blog", label: "Blog" },
  { href: "/projects", label: "Projects" },
  { href: "/about", label: "About" },
];

// Determine the active link based on the current path
const path = Astro.url.pathname;
---

<header class="py-6 border-b border-gray-100 dark:border-gray-800">
  <div class="container mx-auto px-4">
    <div class="flex items-center justify-between">
      <a
        href="/"
        class="text-2xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 transition-colors"
        aria-label="francescoesposito.dev"
      >
        francescoesposito.dev
      </a>

      <div class="flex items-center">
        <nav class="hidden md:block mr-4">
          <ul class="flex gap-8">
            {
              navItems.map((item) => {
                const isActive =
                  path === item.href || path.startsWith(`${item.href}/`);
                return (
                  <li>
                    <a
                      href={item.href}
                      class={`text-lg transition-colors ${isActive ? "text-blue-600 dark:text-blue-400 font-medium" : "text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"}`}
                    >
                      {item.label}
                    </a>
                  </li>
                );
              })
            }
          </ul>
        </nav>

        <button
          id="theme-toggle"
          class="p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800"
          aria-label="Toggle dark mode"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-5 h-5 dark:hidden"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
            ></path>
          </svg>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-5 h-5 hidden dark:block"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
            ></path>
          </svg>
        </button>

        <button
          id="mobile-menu-button"
          class="md:hidden ml-2 p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-800"
          aria-label="Toggle menu"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile menu, hidden by default -->
  <div
    id="mobile-menu"
    class="hidden md:hidden border-t border-gray-100 dark:border-gray-800 mt-4 py-4"
  >
    <div class="container mx-auto px-4">
      <ul class="flex flex-col gap-4">
        {
          navItems.map((item) => {
            const isActive =
              path === item.href || path.startsWith(`${item.href}/`);
            return (
              <li>
                <a
                  href={item.href}
                  class={`block py-2 text-lg ${isActive ? "text-blue-600 dark:text-blue-400 font-medium" : "text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400"}`}
                >
                  {item.label}
                </a>
              </li>
            );
          })
        }
      </ul>
    </div>
  </div>
</header>

<script>
  // Handle mobile menu toggle
  document.addEventListener("DOMContentLoaded", () => {
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");

    if (menuButton && mobileMenu) {
      menuButton.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
      });
    }

    // Handle dark mode toggle
    const themeToggle = document.getElementById("theme-toggle");

    // Check for saved theme preference or use OS preference
    const savedTheme = localStorage.getItem("theme");
    const systemPrefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;

    // Set initial theme
    if (savedTheme === "dark" || (!savedTheme && systemPrefersDark)) {
      document.documentElement.classList.add("dark");
    }

    // Toggle theme
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        const isDark = document.documentElement.classList.toggle("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
    }
  });
</script>
