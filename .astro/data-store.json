[["Map",1,2,9,10,84,85,254,255],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.7.0","content-config-digest","6fa0caece0009440","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://phoinixi.github.io\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"prefetch\":{\"prefetchAll\":true},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,29,30,45,46,59,60,72,73],"developer-dotfiles-guide",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"legacyId":28,"deferredRender":17},{"title":14,"description":15,"pubDate":16,"featured":17,"tags":18}," How to setup your Mac for frontend development with dotfiles","A detailed guide to my frontend development environment setup with custom dotfiles for improved productivity and efficiency.",["Date","2025-03-20T00:00:00.000Z"],true,[19,20,21,22,23,24],"shell","macos","productivity","git","zsh","vscode","If you've been a developer for any length of time, you know that your environment setup can make or break your productivity. Over the years, I've refined my development environment to a point where I can get a new machine up and running with all my preferred configurations in minutes instead of days.\n\nIn this article, I'll walk you through my [dotfiles repository](https://github.com/phoinixi/dotfiles), explaining the key components and how they can supercharge your development workflow.\n\n## What Are Dotfiles? 📁\n\nDotfiles are configuration files for various tools and applications in Unix-like systems (including macOS). They're called \"dotfiles\" because they typically begin with a dot (`.`), which makes them hidden in the file system by default.\n\nThese files control everything from your shell behavior to application-specific settings. By versioning and sharing them, you can:\n\n1. 🚀 Quickly set up a new development environment\n2. 🔄 Ensure consistency across different machines\n3. 👥 Share your configurations with others\n4. 📝 Document your preferences and tools\n\n## Repository Structure 🏗️\n\nMy [dotfiles repository](https://github.com/phoinixi/dotfiles) is organized into a logical structure that makes it easy to find and modify specific configurations:\n\n```\ndotfiles/\n├── git/                    # Git configuration\n├── osx/                    # macOS-specific configurations\n├── utils/                  # Utility scripts\n├── .editorconfig           # Editor configuration\n├── .zshrc                  # Zsh configuration (replaces oh-my-zsh/ folder)\n├── Brewfile                # Homebrew package definitions\n├── install.sh              # Main installation script\n└── README.md               # Documentation\n```\n\nThis modular approach makes it easy to find and modify specific parts of your configuration without having to navigate through monolithic files.\n\n## Key Components of My Dotfiles ✨\n\n### Powerful Aliases 💪\n\nMy `.zshrc` file includes several useful aliases to speed up common tasks. Some examples:\n\n```bash\n# Replacements for common commands with modern alternatives\nalias ls='eza --icons'\nalias ll='eza -l --icons'\nalias la='eza -la --icons'\nalias cat='bat'\n\n# Navigation & Finder\nalias w=\"cd ~/workspace\"\nalias finder=\"open .\"\n\n# JS Development\nalias nfresh=\"rm -rf node_modules/ package-lock.json && npm install\"\nalias dev=\"npm run dev\"\n\n# System Utilities\nalias ip=\"ifconfig -a | grep -o 'inet6\\\\? \\\\(addr:\\\\)\\\\?\\\\s\\\\?\\\\(\\\\(\\\\(\\[0-9\\]\\\\+\\\\.\\\\)\\\\{3\\\\}\\[0-9\\]\\\\+\\\\)\\\\|\\[a-fA-F0-9:\\]\\\\+\\\\)' | awk '{ sub(/inet6? (addr:)? ?/, \\\"\\\"); print }'\"\nalias clean=\"find . -name '*.DS_Store' -type f -ls -delete\"\nalias zip=\"zip -r -X -9\"\n\n# Update All\nalias update='brew update; brew upgrade; brew cleanup; npm update npm -g; npm update -g;'\n```\n\nAdditional aliases, particularly for Git, are provided by the enabled Oh My Zsh plugins (like `git`, `node`, `docker`, etc.).\n\n### Homebrew Package Management: The Brewfile 🍺\n\nThe Brewfile is one of the most powerful components of my dotfiles. It leverages Homebrew's bundle functionality to declaratively specify all the packages and applications needed for development.\n\nHere's a snippet from my actual Brewfile:\n\n```ruby\n# Core Utilities\nbrew \"bash\"\nbrew \"bash-completion@2\"\nbrew \"coreutils\"\nbrew \"git\"\nbrew \"gh\"\nbrew \"curl\"\n\n# Development Utilities\nbrew \"fzf\"\nbrew \"ripgrep\"\nbrew \"bat\"\nbrew \"eza\"\n\n# Frontend Development\nbrew \"fnm\"\nbrew \"pnpm\"\n\n# --- Casks ---\n\n# Fonts\ncask \"font-hack-nerd-font\"\n\n# Terminals\ncask \"hyper\"\n\n# Editors / IDEs\ncask \"visual-studio-code\"\ncask \"cursor\"\n\n# Browsers\ncask \"brave-browser\"\n\n# Productivity & Utilities\ncask \"raycast\"\ncask \"docker\"\n\n# Communication\ncask \"slack\"\n```\n\nThis Brewfile automatically installs:\n\n- 🔧 **Core Utilities:** `bash`, `coreutils`, `git`, `gh`, `curl`, etc.\n- 💻 **Development Utilities:** `fzf` (fuzzy finder), `ripgrep` (search), `bat` (cat clone), `eza` (ls replacement), etc.\n- 🌐 **Frontend:** `fnm` (Node version manager), `pnpm`.\n- ✍️ **Fonts:** `font-hack-nerd-font` (for terminal glyphs).\n- ⌨️ **Apps:** `hyper` (Terminal), VS Code, Cursor, Brave, Raycast, Docker, Slack, etc.\n- ✨ **QuickLook Plugins:** Various plugins for previewing code, markdown, json, etc. (Check `Brewfile` for full list).\n\nWhen you run the installation script, Homebrew reads this file and installs everything in one go. If a package is already installed, it simply skips it.\n\n### Oh-My-Zsh Configuration 💻\n\nMy setup uses [Oh-My-Zsh](https://ohmyz.sh/) as the shell framework, with a customized Solarized Dark theme. The main configuration now resides in the `.zshrc` file in the repository root, which sources Oh My Zsh and applies customizations. This provides:\n\n- 📜 Better command history management\n- ⌨️ Improved tab completion\n- 🧩 Helpful plugins for common tools\n- 🎨 A visually appealing, informative prompt\n\nHere's what my terminal looks like with this configuration:\n\n```\nusername@machine ~/project (main) $\n```\n\nThe prompt shows your current directory and git branch at a glance, making it easier to keep track of where you are and what you're working on.\n\n### macOS System Preferences 🖥️\n\nThe repository also includes scripts in the `osx` directory, primarily `index.sh`, that configure various macOS system preferences for a developer-friendly experience. You can review `osx/index.sh` to see the specific settings applied.\n\nThese settings aim to create a more efficient development environment right from the start, with:\n\n- 🚀 Performance optimizations\n- 🖥️ Dock settings for optimal screen real estate\n- 🔍 Finder configurations for productivity\n- 🔕 System settings that reduce distractions\n\n## Why This Matters for Frontend Developers 🎯\n\nAs a frontend developer, this dotfiles configuration is specifically tailored for web development workflows:\n\n1. 📂 **Quick access to projects**: Aliases make it easy to navigate to frequently-used directories\n2. 🔄 **Streamlined Git workflow**: Aliased commands handle common patterns with fewer keystrokes\n3. 🧹 **Consistency in code style**: The `.editorconfig` ensures uniform formatting\n4. ⏱️ **Reduced setup time**: New machines are ready for productive work in minutes\n\n## Customizing for Your Needs 🛠️\n\nWhile my dotfiles are ready to use out of the box, I encourage you to fork the repository and adapt it to your preferences. The modular structure makes it easy to:\n\n- ➕ Add or remove specific tools in the Brewfile\n- 🔄 Modify aliases to match your workflow\n- ⚙️ Adjust configuration parameters\n- 🔌 Add support for additional applications\n\n## Maintaining Your Dotfiles 🔄\n\nOnce you've set up your dotfiles, it's important to keep them updated as your preferences evolve:\n\n1. 🧪 Make changes locally first to test them\n2. 💾 Commit working changes to your repository\n3. 🔄 Pull updates to other machines when needed\n4. 🧹 Periodically review and remove unused configurations\n\n## Installation 📥\n\nGetting started is simple:\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/phoinixi/dotfiles.git ~/.dotfiles\n    ```\n    _(Using `~/.dotfiles` is a common convention, but you can choose another location)_\n\n2.  **Run the installation script:**\n    ```bash\n    cd ~/.dotfiles\n    ./install.sh\n    ```\n\nThe script will handle installing Homebrew, packages, Oh My Zsh, setting up symlinks, and applying macOS settings.\n\n3.  **Restart your terminal:** Open a new terminal window/tab or run `source ~/.zshrc`.\n\n4.  **(Manual Step) Configure Git User:**\n    ```bash\n    git config --global user.name \"Your Name\"\n    git config --global user.email \"your.email@example.com\"\n    ```\n\n## Conclusion 🏁\n\nA well-crafted set of dotfiles is an investment that pays dividends throughout your development career. My collection has evolved over years of professional work, and I continue to refine it as I discover new tools and techniques.\n\nWhether you use my dotfiles as a starting point or simply as inspiration for your own, I hope this article has shown the value of maintaining a versioned, portable configuration for your development environment.\n\nCheck out the [full repository on GitHub](https://github.com/phoinixi/dotfiles) and feel free to raise issues or submit pull requests if you have suggestions for improvements!\n\n---\n\n*What's your favorite dotfiles trick? Let me know in the comments below!*","src/content/blog/developer-dotfiles-guide.mdx","948b8daa2dd048cb","developer-dotfiles-guide.mdx","jsonresume-theme-stackoverflow",{"id":29,"data":31,"body":41,"filePath":42,"digest":43,"legacyId":44,"deferredRender":17},{"title":32,"description":33,"pubDate":34,"featured":35,"tags":36},"Resume in JSON: jsonresume-theme-stackoverflow","I created a sleek template for JSON Resume that offers a unique and professional look for your resume.",["Date","2019-01-28T00:00:00.000Z"],false,[37,38,39,40],"opensource","webdev","showdev","resume","I've always been intrigued by the idea of having my resume in a structured format like JSON, which allows for easy updates and different presentations based on the same data.\n\n## What is JSON Resume?\n\n[JSON Resume](https://jsonresume.org/) is an open source initiative to create a JSON-based standard for resumes. Having your resume in JSON format comes with several benefits:\n\n- **Version control**: Track changes to your resume over time\n- **Multiple export formats**: Generate PDF, HTML, Markdown from a single source\n- **Customizable themes**: Apply different visual styles to your resume data\n\n## My Stack Overflow Theme\n\nI created a Stack Overflow inspired theme for JSON Resume that you can find on [GitHub](https://github.com/phoinixi/jsonresume-theme-stackoverflow). It offers a clean, professional look for your resume that's familiar to developers.\n\n### Features\n\n- Clean and professional design inspired by Stack Overflow profiles\n- Responsive layout that works on mobile and desktop\n- Easy to customize with your personal information\n- Support for all standard JSON Resume fields\n\n### How to Use It\n\n1. Install the JSON Resume CLI: `npm install -g resume-cli`\n2. Install my theme: `npm install jsonresume-theme-stackoverflow`\n3. Create your `resume.json` file with your information\n4. Generate your resume: `resume export resume.pdf -t stackoverflow`\n\nGive it a try and let me know what you think! Pull requests and suggestions are always welcome.\n\nYou can also check out the [live demo](https://themes.jsonresume.org/stackoverflow) to see how it looks.\n\nHappy job hunting!","src/content/blog/jsonresume-theme-stackoverflow.mdx","bc646436ac062bb5","jsonresume-theme-stackoverflow.mdx","modern-react-theme-json-resume",{"id":45,"data":47,"body":55,"filePath":56,"digest":57,"legacyId":58,"deferredRender":17},{"title":48,"description":49,"pubDate":50,"featured":35,"tags":51},"I Built a Modern React Theme for JSON Resume","A guide on how I created a custom React-based theme for the JSON Resume standard.",["Date","2025-04-12T00:00:00.000Z"],[52,40,53,54],"react","typescript","json","## Creating a Better Resume Experience with React\n\nOver the past few weeks, I've been working on a project that combines my love for clean design and React development – a modern theme for JSON Resume called **jsonresume-theme-react**.\n\n## Why Another Resume Theme?\n\nIf you're not familiar with [JSON Resume](https://jsonresume.org/), it's a fantastic initiative that lets you manage your resume as a JSON file. The ecosystem has several themes, but I found most of them were either outdated or missing features I wanted.\n\nI needed something that:\n- Used modern React\n- Supported multiple languages\n- Rendered markdown in descriptions\n- Looked good both on screen and in print\n\nSo I decided to build my own, and I'm pretty happy with how it turned out!\n\n![Resume Screenshot](https://raw.githubusercontent.com/phoinixi/jsonresume-theme-react/main/screenshot.png)\n\n## What Makes This Theme Different\n\nI've focused on creating a balance between professional appearance and modern functionality:\n\n- **React 18 & TypeScript** - Built on current tech for better maintainability\n- **Multi-language Support** - Create different versions of your resume for different languages\n- **Markdown in Descriptions** - Format your job descriptions with proper lists and emphasis\n- **Print-Optimized** - Carefully designed to look great when printed to PDF\n- **Responsive Design** - Looks good on everything from phones to desktops\n\nThe theme uses Tailwind CSS for styling, which made it much easier to create a responsive layout that prints well.\n\n## A Look Inside\n\nThe theme renders all standard sections from the JSON Resume schema:\n\n- Basic information with optional profile photo\n- Work experience with properly formatted date ranges\n- Education history\n- Skills with optional proficiency levels\n- Projects and volunteer work\n- Languages and interests\n\nHere's a small example of how work experience renders with markdown support:\n\n```json\n\"work\": [\n  {\n    \"name\": \"Company Name\",\n    \"position\": \"Senior Developer\",\n    \"startDate\": \"2020-01-01\",\n    \"endDate\": \"2022-12-31\",\n    \"summary\": \"Led development of key products\",\n    \"description\": \"- Rebuilt the authentication system\\n- Improved performance by 40%\\n- Mentored junior developers\"\n  }\n]\n```\n\nThis renders as properly formatted bullets in the final resume, making it much more readable than plain text.\n\n## Supporting Multiple Languages\n\nOne feature I'm particularly proud of is the multilingual support. The theme detects the language from the \"language\" property in your resume JSON:\n\n```json\n{\n  \"basics\": {\n    \"name\": \"John Doe\",\n    \"label\": \"Programmer\"\n  },\n  \"language\": \"en\",\n  \"work\": [\n    // work history\n  ]\n}\n```\n\nYou can create versions for different languages:\n\n```json\n{\n  \"basics\": {\n    \"name\": \"Jean Dupont\",\n    \"label\": \"Développeur\"\n  },\n  \"language\": \"fr\",\n  \"work\": [\n    // work history in French\n  ]\n}\n```\n\nThis is perfect if you're applying for jobs internationally or in bilingual markets.\n\n## The Development Process\n\nBuilding this theme taught me a lot about:\n\n1. **Optimizing for print media** - CSS for print is surprisingly tricky\n2. **Component organization** - Breaking down a resume into logical React components\n3. **Handling internationalization** - Working with dates and text in multiple languages\n4. **Balancing design and function** - Creating something that looks good but prioritizes content\n\nThe most challenging part was ensuring the theme remained faithful to the JSON Resume schema while adding extra features. I wanted to make sure it would work with existing resume data without modification.\n\n## Try It Yourself\n\nIf you want to give it a spin, the theme is available on npm and GitHub. I've created detailed documentation in the repository about installation and configuration options.\n\nI'd love to hear what you think or see examples if you use it for your own resume! I'm still actively developing it and plan to add more customization options in the future.\n\n## What's Next?\n\nI'm planning several improvements:\n\n- Theme customization through configuration\n- More layout variants\n- Custom sections support\n- More export options\n\nHave you used JSON Resume before? What features would you want in a resume theme? Let me know in the comments!\n\n---\n\nThe project is open source and available at [github.com/phoinixi/jsonresume-theme-react](https://github.com/phoinixi/jsonresume-theme-react)","src/content/blog/modern-react-theme-json-resume.mdx","262f6c66eef289ce","modern-react-theme-json-resume.mdx","one-way-data-binding-vanilla-js",{"id":59,"data":61,"body":68,"filePath":69,"digest":70,"legacyId":71,"deferredRender":17},{"title":62,"description":63,"pubDate":64,"featured":35,"tags":65},"One-way data binding in vanilla JS (POC)","Learn how to implement one-way data binding in pure JavaScript without any frameworks",["Date","2019-01-25T00:00:00.000Z"],[39,66,38,67],"javascript","databinding","JavaScript frameworks like Angular, React, and Vue all provide built-in ways to bind data to the UI. But how do they work under the hood? I wanted to understand this better, so I built a simple one-way data binding implementation in vanilla JavaScript.\n\n## What is one-way data binding?\n\nOne-way data binding means changes in the application state are automatically reflected in the UI, but not the other way around. The flow is:\n\n```\nModel → View\n```\n\nWhen the model (data) changes, the view (UI) updates automatically.\n\n## The implementation\n\nHere's a simple implementation of one-way data binding in vanilla JavaScript:\n\n```javascript\n// Our model - a simple object with some data\nconst model = {\n  name: 'John',\n  age: 30\n};\n\n// Proxy to intercept property access and modifications\nconst handler = {\n  set(target, property, value) {\n    target[property] = value;\n    \n    // Update all elements that use this property\n    render();\n    return true;\n  }\n};\n\n// Create a reactive proxy for our model\nconst reactiveModel = new Proxy(model, handler);\n\n// Render function to update the DOM\nfunction render() {\n  // Find all elements with data-bind attribute\n  document.querySelectorAll('[data-bind]').forEach(element => {\n    const property = element.getAttribute('data-bind');\n    if (property in reactiveModel) {\n      element.textContent = reactiveModel[property];\n    }\n  });\n}\n\n// Initial render\nrender();\n\n// Example usage:\n// \u003Cdiv data-bind=\"name\">\u003C/div>\n// \u003Cdiv data-bind=\"age\">\u003C/div>\n```\n\n## How it works:\n\n1. We create a model object with our data\n2. We use JavaScript's Proxy to intercept property changes\n3. When a property changes, we call the render function\n4. The render function finds all elements with a data-bind attribute and updates them\n\n## Demo\n\nLet's see it in action:\n\n```html\n\u003C!DOCTYPE html>\n\u003Chtml>\n\u003Chead>\n  \u003Ctitle>One-way data binding in vanilla JS\u003C/title>\n\u003C/head>\n\u003Cbody>\n  \u003Ch1>Hello, \u003Cspan data-bind=\"name\">\u003C/span>!\u003C/h1>\n  \u003Cp>You are \u003Cspan data-bind=\"age\">\u003C/span> years old.\u003C/p>\n  \n  \u003Cbutton id=\"updateName\">Change Name\u003C/button>\n  \u003Cbutton id=\"updateAge\">Change Age\u003C/button>\n  \n  \u003Cscript>\n    const model = { name: 'John', age: 30 };\n    const reactiveModel = new Proxy(model, {\n      set(target, property, value) {\n        target[property] = value;\n        render();\n        return true;\n      }\n    });\n\n    function render() {\n      document.querySelectorAll('[data-bind]').forEach(element => {\n        const property = element.getAttribute('data-bind');\n        if (property in reactiveModel) {\n          element.textContent = reactiveModel[property];\n        }\n      });\n    }\n\n    // Initial render\n    render();\n\n    // Event listeners for buttons\n    document.getElementById('updateName').addEventListener('click', () => {\n      reactiveModel.name = 'Jane';\n    });\n    \n    document.getElementById('updateAge').addEventListener('click', () => {\n      reactiveModel.age = reactiveModel.age + 1;\n    });\n  \u003C/script>\n\u003C/body>\n\u003C/html>\n```\n\n## Conclusion\n\nWhile this is a simplified example, it demonstrates the core concept behind one-way data binding. Modern frameworks build on these ideas with more features and optimizations, like Virtual DOM for efficient updates and change detection algorithms.\n\nIn my next post, I'll explore how to implement two-way data binding, where changes in the UI update the model as well.\n\nYou can find the complete code example on [my GitHub](https://github.com/phoinixi/one-way-data-binding).","src/content/blog/one-way-data-binding-vanilla-js.mdx","e9a292f510d188bf","one-way-data-binding-vanilla-js.mdx","two-way-data-binding-vanilla-js",{"id":72,"data":74,"body":80,"filePath":81,"digest":82,"legacyId":83,"deferredRender":17},{"title":75,"description":76,"pubDate":77,"featured":35,"tags":78},"Two-way Data Binding in Vanilla JS (POC)","Building a proof of concept for two-way data binding using plain JavaScript without any frameworks.",["Date","2019-02-02T00:00:00.000Z"],[66,38,67,79],"frontend","Data binding is a powerful concept in modern web development. While frameworks like Angular, Vue, and React offer sophisticated ways to bind data, understanding how to implement this pattern in vanilla JavaScript can deepen your understanding of these tools.\n\nIn this post, I'll demonstrate a simple two-way data binding implementation using plain JavaScript.\n\n## What is Two-way Data Binding?\n\nTwo-way data binding creates a connection between the UI and the data model:\n\n1. When the UI changes (e.g., user input), the data model updates automatically\n2. When the data model changes, the UI updates automatically\n\nFrameworks abstract this away, but the underlying concepts are straightforward.\n\n## The Implementation\n\nHere's a simple proof of concept:\n\n```javascript\nclass DataBinder {\n  constructor(objectToBind) {\n    this.data = objectToBind || {};\n    this.elements = [];\n    this.eventListeners = [];\n  }\n  \n  bind(element, property) {\n    // Store the element and property\n    this.elements.push({ element, property });\n    \n    // Set initial value\n    if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n      element.value = this.data[property] || '';\n      \n      // Add event listener to update data when input changes\n      const listener = () => {\n        this.data[property] = element.value;\n        this.updateBindings(property);\n      };\n      \n      element.addEventListener('input', listener);\n      this.eventListeners.push({ element, event: 'input', listener });\n    } else {\n      element.textContent = this.data[property] || '';\n    }\n    \n    return this;\n  }\n  \n  updateBindings(property) {\n    // Update all elements bound to this property\n    this.elements.forEach(el => {\n      if (el.property === property) {\n        if (el.element.tagName === 'INPUT' || el.element.tagName === 'TEXTAREA') {\n          el.element.value = this.data[property] || '';\n        } else {\n          el.element.textContent = this.data[property] || '';\n        }\n      }\n    });\n  }\n  \n  // Method to programmatically update data\n  set(property, value) {\n    this.data[property] = value;\n    this.updateBindings(property);\n    return this;\n  }\n  \n  // Clean up event listeners\n  unbindAll() {\n    this.eventListeners.forEach(({ element, event, listener }) => {\n      element.removeEventListener(event, listener);\n    });\n    this.elements = [];\n    this.eventListeners = [];\n  }\n}\n```\n\n## Usage Example\n\nHere's how you could use this data binding class:\n\n```html\n\u003Cinput id=\"nameInput\" type=\"text\" placeholder=\"Enter your name\">\n\u003Cp>Hello, \u003Cspan id=\"nameDisplay\">\u003C/span>!\u003C/p>\n\u003Cbutton id=\"resetBtn\">Reset\u003C/button>\n\n\u003Cscript>\n  const person = { name: 'Francesco' };\n  const binder = new DataBinder(person);\n  \n  // Bind the input and span to the name property\n  binder.bind(document.getElementById('nameInput'), 'name')\n        .bind(document.getElementById('nameDisplay'), 'name');\n  \n  // Add reset button functionality\n  document.getElementById('resetBtn').addEventListener('click', () => {\n    binder.set('name', '');\n  });\n\u003C/script>\n```\n\n## Limitations\n\nThis implementation is a simplified proof of concept with limitations:\n\n- It doesn't handle nested properties\n- It would need optimization for larger applications\n- No support for computed properties or watchers\n\n## Why This Matters\n\nUnderstanding how data binding works under the hood:\n\n1. Improves your mental model of frameworks\n2. Helps you debug complex binding issues\n3. Allows for custom implementation when needed\n4. Makes you a better JavaScript developer overall\n\n## Conclusion\n\nWhile you'd typically reach for a framework in production, building these patterns from scratch deepens your understanding of core web development concepts.\n\nThe complete code for this proof of concept is available in this [GitHub repository](https://github.com/phoinixi/vanilla-data-binding).","src/content/blog/two-way-data-binding-vanilla-js.mdx","5a75fcae4ede005f","two-way-data-binding-vanilla-js.mdx","projects",["Map",86,87,134,135,163,164,192,193,228,229],"personal-website",{"id":86,"data":88,"body":96,"filePath":97,"digest":98,"rendered":99,"legacyId":133},{"title":89,"description":90,"link":91,"year":92,"tags":93,"draft":17,"featured":35},"Personal Website","My personal website built with Astro and TailwindCSS. Features responsive design, dark mode, and content-focused presentation.","https://github.com/phoinixi/phoinixi.github.io","2025",[94,95,53],"astro","tailwindcss","# Personal Website\n\nThis is the repository for my personal website, built using modern web technologies to showcase my work, share knowledge, and connect with the developer community.\n\n## Tech Stack\n\n- **Astro** - For super-fast, content-focused static site generation\n- **TailwindCSS** - For utility-first styling with minimal CSS\n- **TypeScript** - For type safety and improved developer experience\n- **Markdown/MDX** - For easy content management\n\n## Features\n\n### Performance Focused\n\nThe site is built with performance as a priority, achieving perfect Lighthouse scores through Astro's partial hydration approach and smart asset optimization.\n\n### Content Collections\n\nAll content (blog posts, projects, etc.) is managed through Astro's content collections, making it easy to add, remove, or update content without touching the codebase.\n\n### Dark Mode Support\n\nThe site includes a fully implemented dark mode that respects system preferences while allowing manual toggling.\n\n### Responsive Design\n\nThe layout adapts seamlessly to all device sizes from mobile phones to large desktop screens.\n\n## Architecture\n\nThe site follows a modular component architecture with:\n\n- Reusable UI components\n- Content-driven pages\n- Type-safe data handling\n- Optimized asset loading\n\nThis structure makes the site easy to maintain and extend over time.","src/content/projects/personal-website.md","86a3bdc35e60e71e",{"html":100,"metadata":101},"\u003Ch1 id=\"personal-website\">Personal Website\u003C/h1>\n\u003Cp>This is the repository for my personal website, built using modern web technologies to showcase my work, share knowledge, and connect with the developer community.\u003C/p>\n\u003Ch2 id=\"tech-stack\">Tech Stack\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Astro\u003C/strong> - For super-fast, content-focused static site generation\u003C/li>\n\u003Cli>\u003Cstrong>TailwindCSS\u003C/strong> - For utility-first styling with minimal CSS\u003C/li>\n\u003Cli>\u003Cstrong>TypeScript\u003C/strong> - For type safety and improved developer experience\u003C/li>\n\u003Cli>\u003Cstrong>Markdown/MDX\u003C/strong> - For easy content management\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Ch3 id=\"performance-focused\">Performance Focused\u003C/h3>\n\u003Cp>The site is built with performance as a priority, achieving perfect Lighthouse scores through Astro’s partial hydration approach and smart asset optimization.\u003C/p>\n\u003Ch3 id=\"content-collections\">Content Collections\u003C/h3>\n\u003Cp>All content (blog posts, projects, etc.) is managed through Astro’s content collections, making it easy to add, remove, or update content without touching the codebase.\u003C/p>\n\u003Ch3 id=\"dark-mode-support\">Dark Mode Support\u003C/h3>\n\u003Cp>The site includes a fully implemented dark mode that respects system preferences while allowing manual toggling.\u003C/p>\n\u003Ch3 id=\"responsive-design\">Responsive Design\u003C/h3>\n\u003Cp>The layout adapts seamlessly to all device sizes from mobile phones to large desktop screens.\u003C/p>\n\u003Ch2 id=\"architecture\">Architecture\u003C/h2>\n\u003Cp>The site follows a modular component architecture with:\u003C/p>\n\u003Cul>\n\u003Cli>Reusable UI components\u003C/li>\n\u003Cli>Content-driven pages\u003C/li>\n\u003Cli>Type-safe data handling\u003C/li>\n\u003Cli>Optimized asset loading\u003C/li>\n\u003C/ul>\n\u003Cp>This structure makes the site easy to maintain and extend over time.\u003C/p>",{"headings":102,"localImagePaths":128,"remoteImagePaths":129,"frontmatter":130,"imagePaths":132},[103,105,109,112,116,119,122,125],{"depth":104,"slug":86,"text":89},1,{"depth":106,"slug":107,"text":108},2,"tech-stack","Tech Stack",{"depth":106,"slug":110,"text":111},"features","Features",{"depth":113,"slug":114,"text":115},3,"performance-focused","Performance Focused",{"depth":113,"slug":117,"text":118},"content-collections","Content Collections",{"depth":113,"slug":120,"text":121},"dark-mode-support","Dark Mode Support",{"depth":113,"slug":123,"text":124},"responsive-design","Responsive Design",{"depth":106,"slug":126,"text":127},"architecture","Architecture",[],[],{"title":89,"description":90,"link":91,"year":92,"tags":131,"featured":35,"draft":17},[94,95,53],[],"personal-website.md","jsonresume-stackoverflow",{"id":134,"data":136,"body":144,"filePath":145,"digest":146,"rendered":147,"legacyId":162},{"title":137,"description":138,"link":139,"year":140,"tags":141,"draft":35,"featured":35},"JSON Resume Theme: Stack Overflow","A popular Stack Overflow-inspired theme for JSON Resume with over 140 stars. Clean, professional design that's familiar to developers.","https://github.com/phoinixi/jsonresume-theme-stackoverflow","2019",[142,40,54,143],"handlebars","css","# JSON Resume Theme: Stack Overflow\n\nThis theme for JSON Resume offers a clean, professional design inspired by Stack Overflow profiles. It's become one of the most popular themes in the JSON Resume ecosystem with over 140 stars on GitHub.\n\n## Features\n\n- Clean, professional layout optimized for readability\n- Responsive design that works well on all devices\n- Print-friendly styling for PDF generation\n- Support for all standard JSON Resume fields\n- Easy customization options\n\nThe theme uses Handlebars for templating and includes carefully crafted CSS to ensure your resume looks great in any format.\n\n## Usage\n\n```bash\nnpm install jsonresume-theme-stackoverflow\nresume export resume.pdf -t stackoverflow\n```\n\nCheck out the [live demo](https://themes.jsonresume.org/stackoverflow) to see it in action.","src/content/projects/jsonresume-stackoverflow.md","6102f19e93f424af",{"html":148,"metadata":149},"\u003Ch1 id=\"json-resume-theme-stack-overflow\">JSON Resume Theme: Stack Overflow\u003C/h1>\n\u003Cp>This theme for JSON Resume offers a clean, professional design inspired by Stack Overflow profiles. It’s become one of the most popular themes in the JSON Resume ecosystem with over 140 stars on GitHub.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>Clean, professional layout optimized for readability\u003C/li>\n\u003Cli>Responsive design that works well on all devices\u003C/li>\n\u003Cli>Print-friendly styling for PDF generation\u003C/li>\n\u003Cli>Support for all standard JSON Resume fields\u003C/li>\n\u003Cli>Easy customization options\u003C/li>\n\u003C/ul>\n\u003Cp>The theme uses Handlebars for templating and includes carefully crafted CSS to ensure your resume looks great in any format.\u003C/p>\n\u003Ch2 id=\"usage\">Usage\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> jsonresume-theme-stackoverflow\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">resume\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> export\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> resume.pdf\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> stackoverflow\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Check out the \u003Ca href=\"https://themes.jsonresume.org/stackoverflow\">live demo\u003C/a> to see it in action.\u003C/p>",{"headings":150,"localImagePaths":157,"remoteImagePaths":158,"frontmatter":159,"imagePaths":161},[151,153,154],{"depth":104,"slug":152,"text":137},"json-resume-theme-stack-overflow",{"depth":106,"slug":110,"text":111},{"depth":106,"slug":155,"text":156},"usage","Usage",[],[],{"title":137,"description":138,"link":139,"year":140,"tags":160,"featured":35},[142,40,54,143],[],"jsonresume-stackoverflow.md","jsonresume-react",{"id":163,"data":165,"body":170,"filePath":171,"digest":172,"rendered":173,"legacyId":191},{"title":166,"description":167,"link":168,"year":92,"tags":169,"draft":35,"featured":35},"JSON Resume Theme: React","A modern, customizable React-based theme for JSON Resume with multi-language support, markdown rendering, and print optimization.","https://github.com/phoinixi/jsonresume-theme-react",[52,53,40,95],"# JSON Resume Theme: React\n\nA modern React-based theme for JSON Resume that brings advanced functionality and customization options to your resume. This theme uses React 18, TypeScript, and Tailwind CSS to create beautiful, responsive resumes.\n\n## Features\n\n- **React 18 & TypeScript** - Built on current tech for better maintainability\n- **Multi-language Support** - Create different versions of your resume for different languages\n- **Markdown in Descriptions** - Format your job descriptions with proper lists and emphasis\n- **Print-Optimized** - Carefully designed to look great when printed to PDF\n- **Responsive Design** - Looks good on everything from phones to desktops\n\n## Advanced Features\n\n- Custom sections with flexible layouts\n- Dark mode support\n- Configurable typography and colors\n- Accessibility optimized\n- Multiple export formats\n\n## Installation\n\n```bash\nnpm install jsonresume-theme-react\nresume export resume.pdf -t react\n```\n\nThe theme is fully compatible with the JSON Resume standard but adds additional capabilities through optional fields.","src/content/projects/jsonresume-react.md","57627754d3b48ddf",{"html":174,"metadata":175},"\u003Ch1 id=\"json-resume-theme-react\">JSON Resume Theme: React\u003C/h1>\n\u003Cp>A modern React-based theme for JSON Resume that brings advanced functionality and customization options to your resume. This theme uses React 18, TypeScript, and Tailwind CSS to create beautiful, responsive resumes.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>React 18 &#x26; TypeScript\u003C/strong> - Built on current tech for better maintainability\u003C/li>\n\u003Cli>\u003Cstrong>Multi-language Support\u003C/strong> - Create different versions of your resume for different languages\u003C/li>\n\u003Cli>\u003Cstrong>Markdown in Descriptions\u003C/strong> - Format your job descriptions with proper lists and emphasis\u003C/li>\n\u003Cli>\u003Cstrong>Print-Optimized\u003C/strong> - Carefully designed to look great when printed to PDF\u003C/li>\n\u003Cli>\u003Cstrong>Responsive Design\u003C/strong> - Looks good on everything from phones to desktops\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"advanced-features\">Advanced Features\u003C/h2>\n\u003Cul>\n\u003Cli>Custom sections with flexible layouts\u003C/li>\n\u003Cli>Dark mode support\u003C/li>\n\u003Cli>Configurable typography and colors\u003C/li>\n\u003Cli>Accessibility optimized\u003C/li>\n\u003Cli>Multiple export formats\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"installation\">Installation\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">npm\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> jsonresume-theme-react\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">resume\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> export\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> resume.pdf\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -t\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> react\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The theme is fully compatible with the JSON Resume standard but adds additional capabilities through optional fields.\u003C/p>",{"headings":176,"localImagePaths":186,"remoteImagePaths":187,"frontmatter":188,"imagePaths":190},[177,179,180,183],{"depth":104,"slug":178,"text":166},"json-resume-theme-react",{"depth":106,"slug":110,"text":111},{"depth":106,"slug":181,"text":182},"advanced-features","Advanced Features",{"depth":106,"slug":184,"text":185},"installation","Installation",[],[],{"title":166,"description":167,"link":168,"year":92,"tags":189,"featured":35},[52,53,40,95],[],"jsonresume-react.md","dotfiles",{"id":192,"data":194,"body":200,"filePath":201,"digest":202,"rendered":203,"legacyId":227},{"title":195,"description":196,"link":197,"year":198,"tags":199,"draft":35,"featured":35},"Frontend Developer Dotfiles","Dotfiles for frontend development in macOS. Includes oh-my-zsh configuration, VS Code settings, git aliases, and various productivity utilities.","https://github.com/phoinixi/dotfiles","2023",[19,23,20,22],"# Frontend Developer Dotfiles\n\nA comprehensive collection of dotfiles and configuration scripts for setting up a complete frontend development environment on macOS. This repository makes it quick and easy to configure a new machine with a consistent development setup.\n\n## Features\n\n- Oh-My-Zsh setup with custom theme and plugins\n- Git configuration with useful aliases and shortcuts\n- VS Code settings optimized for frontend development\n- Homebrew setup with essential development tools\n- macOS system preferences tuned for developers\n\n## Key Components\n\n### Terminal Enhancements\n\nThe configuration includes a customized Zsh setup with the Solarized Dark theme, which provides a visually pleasing environment that's easy on the eyes during long coding sessions.\n\n### Git Workflow\n\nThe repository includes numerous git aliases that streamline common development tasks:\n\n```bash\ngit c \"commit message\"  # Quick commit\ngit snapshot            # Stash with timestamp\ngit changes             # View recent changes\n```\n\n### Easy Installation\n\nWith a single command, you can set up your entire development environment:\n\n```bash\ngit clone https://github.com/phoinixi/dotfiles.git ~/dotfiles && (cd ~/dotfiles && ./install.sh)\n```\n\nThe installation script is idempotent, so it can be run multiple times without causing issues.","src/content/projects/dotfiles.md","ab4a5040631de95a",{"html":204,"metadata":205},"\u003Ch1 id=\"frontend-developer-dotfiles\">Frontend Developer Dotfiles\u003C/h1>\n\u003Cp>A comprehensive collection of dotfiles and configuration scripts for setting up a complete frontend development environment on macOS. This repository makes it quick and easy to configure a new machine with a consistent development setup.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>Oh-My-Zsh setup with custom theme and plugins\u003C/li>\n\u003Cli>Git configuration with useful aliases and shortcuts\u003C/li>\n\u003Cli>VS Code settings optimized for frontend development\u003C/li>\n\u003Cli>Homebrew setup with essential development tools\u003C/li>\n\u003Cli>macOS system preferences tuned for developers\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"key-components\">Key Components\u003C/h2>\n\u003Ch3 id=\"terminal-enhancements\">Terminal Enhancements\u003C/h3>\n\u003Cp>The configuration includes a customized Zsh setup with the Solarized Dark theme, which provides a visually pleasing environment that’s easy on the eyes during long coding sessions.\u003C/p>\n\u003Ch3 id=\"git-workflow\">Git Workflow\u003C/h3>\n\u003Cp>The repository includes numerous git aliases that streamline common development tasks:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> c\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"commit message\"\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Quick commit\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> snapshot\u003C/span>\u003Cspan style=\"color:#6A737D\">            # Stash with timestamp\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> changes\u003C/span>\u003Cspan style=\"color:#6A737D\">             # View recent changes\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"easy-installation\">Easy Installation\u003C/h3>\n\u003Cp>With a single command, you can set up your entire development environment:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> clone\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> https://github.com/phoinixi/dotfiles.git\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ~/dotfiles\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; (\u003C/span>\u003Cspan style=\"color:#79B8FF\">cd\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> ~/dotfiles\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x26;&#x26; \u003C/span>\u003Cspan style=\"color:#B392F0\">./install.sh\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The installation script is idempotent, so it can be run multiple times without causing issues.\u003C/p>",{"headings":206,"localImagePaths":222,"remoteImagePaths":223,"frontmatter":224,"imagePaths":226},[207,209,210,213,216,219],{"depth":104,"slug":208,"text":195},"frontend-developer-dotfiles",{"depth":106,"slug":110,"text":111},{"depth":106,"slug":211,"text":212},"key-components","Key Components",{"depth":113,"slug":214,"text":215},"terminal-enhancements","Terminal Enhancements",{"depth":113,"slug":217,"text":218},"git-workflow","Git Workflow",{"depth":113,"slug":220,"text":221},"easy-installation","Easy Installation",[],[],{"title":195,"description":196,"link":197,"year":198,"tags":225,"featured":35},[19,23,20,22],[],"dotfiles.md","resuml",{"id":228,"data":230,"body":236,"filePath":237,"digest":238,"rendered":239,"legacyId":253},{"title":231,"description":232,"link":233,"year":92,"tags":234,"draft":35,"featured":17},"Resuml","A modern, open-source resume builder powered by Node and TypeScript. Create, edit, and export beautiful resumes with ease.","https://github.com/phoinixi/resuml",[53,40,235],"open-source","# Resuml\n\nResuml is a modern, open-source resume builder built with Astro and TypeScript. It allows users to create, edit, and export beautiful resumes with a focus on simplicity and customization.\n\n## Features\n\n- Live resume editing with YAML\n- Multiple export formats (JSON, HTML)\n- Built with Node and TypeScript\n\n## Repository\n\nFind the source code and documentation at [https://github.com/phoinixi/resuml](https://github.com/phoinixi/resuml)","src/content/projects/resuml.md","3e91acd01e052fa5",{"html":240,"metadata":241},"\u003Ch1 id=\"resuml\">Resuml\u003C/h1>\n\u003Cp>Resuml is a modern, open-source resume builder built with Astro and TypeScript. It allows users to create, edit, and export beautiful resumes with a focus on simplicity and customization.\u003C/p>\n\u003Ch2 id=\"features\">Features\u003C/h2>\n\u003Cul>\n\u003Cli>Live resume editing with YAML\u003C/li>\n\u003Cli>Multiple export formats (JSON, HTML)\u003C/li>\n\u003Cli>Built with Node and TypeScript\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"repository\">Repository\u003C/h2>\n\u003Cp>Find the source code and documentation at \u003Ca href=\"https://github.com/phoinixi/resuml\">https://github.com/phoinixi/resuml\u003C/a>\u003C/p>",{"headings":242,"localImagePaths":248,"remoteImagePaths":249,"frontmatter":250,"imagePaths":252},[243,244,245],{"depth":104,"slug":228,"text":231},{"depth":106,"slug":110,"text":111},{"depth":106,"slug":246,"text":247},"repository","Repository",[],[],{"title":231,"description":232,"link":233,"year":92,"tags":251,"featured":17},[53,40,235],[],"resuml.md","pages",["Map",256,257,265,266,275,276,284,285,292,293],"footer",{"id":256,"data":258,"body":261,"filePath":262,"digest":263,"legacyId":264,"deferredRender":17},{"title":259,"description":260},"Footer Content","Content for the website footer","© {new Date().getFullYear()} Francesco Esposito. All rights reserved.\n\nBuilt with ❤️ with [Astro](https://astro.build) and [TailwindCSS](https://tailwindcss.com)","src/content/pages/footer.mdx","449239b32d8136ef","footer.mdx","about",{"id":265,"data":267,"body":271,"filePath":272,"digest":273,"legacyId":274,"deferredRender":17},{"title":268,"description":269,"updatedDate":270},"About Me","Learn more about me, my background, and what I'm currently working on.",["Date","2023-12-01T00:00:00.000Z"],"I'm Francesco, a software engineer with a passion for frontend development and creating intuitive user experiences. This is my personal space where I share what I learn and build to help others in their coding journey.\n\n## My Background\n\nWith over 10 years of experience in software development, I've worked on various web applications, focusing primarily on frontend technologies like React, TypeScript, and modern CSS.\n\n## Current favorite Tech Stack\n\n- React\n- TypeScript\n- TailwindCSS\n- Node.js\n\n## Mentorship\n\nI'm passionate about helping other developers grow in their careers. As a mentor, I provide guidance on:\n\n- Career advice and growth strategies\n- Technical interview preparation and mock interviews\n- Resume and LinkedIn profile reviews\n- Code reviews and architecture feedback\n\nYou can book a session with me on [MentorCruise](https://mentorcruise.com/mentor/francescoesposito/) where I offer both one-time sessions and long term mentorship.\n\n## Connect with Me\n\n- [GitHub](https://github.com/phoinixi)\n- [LinkedIn](https://linkedin.com/in/francescoes)\n- [Email](mailto:hey@francescoesposito.dev)\n- [MentorCruise](https://mentorcruise.com/mentor/francescoesposito/)\n\n## About This Site\n\nThis site is built with [Astro](https://astro.build) and [Tailwind CSS](https://tailwindcss.com). It's designed to be fast, accessible, and responsive.\n\nThe [source code](https://github.com/phoinixi/phoinixi.github.io) is available on GitHub.","src/content/pages/about.mdx","ea000c787dd9a281","about.mdx","home-hero",{"id":275,"data":277,"body":280,"filePath":281,"digest":282,"legacyId":283,"deferredRender":17},{"title":278,"description":279},"Hero Content","Hero section content for the homepage","# Hey, I'm Francesco!\n\nI'm a software engineer specializing in frontend development. This is my personal space where I share my knowledge and experiences. \u003Cspan class=\"text-blue-500\">✨\u003C/span>","src/content/pages/home-hero.mdx","b68293d55c2a5186","home-hero.mdx","sidebar-about",{"id":284,"data":286,"body":288,"filePath":289,"digest":290,"legacyId":291,"deferredRender":17},{"title":268,"description":287},"About me section for the website sidebar","Software engineer with a passion for frontend development. I write about TypeScript, React, and modern web technologies.","src/content/pages/sidebar-about.mdx","d7be5a1108f7e466","sidebar-about.mdx","sidebar-mentorship",{"id":292,"data":294,"body":297,"filePath":298,"digest":299,"legacyId":300,"deferredRender":17},{"title":295,"description":296},"Mentorship","Mentorship section for the website sidebar","#### Looking for guidance in your tech career?\nI offer mentorship for developers looking to prepare for technical interviews and advance their career.","src/content/pages/sidebar-mentorship.mdx","b46f545f0805d67c","sidebar-mentorship.mdx"]